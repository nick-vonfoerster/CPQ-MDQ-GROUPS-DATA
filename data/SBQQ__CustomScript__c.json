{
    "records": [
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef1"
            },
            "Name": "QuoteLine Escalation - KB4",
            "SBQQ__Code__c": "export function onAfterPriceRules(quote, lines, conn)  {\r\n    // Prevent logic execution if MDQ__c is true\r\n    if (quote?.record?.MDQ__c === true) {\r\n        return Promise.resolve(); // Skip logic\r\n    }\r\n\r\n{\r\n  //debugger;\r\n\r\n if (lines != null && lines != undefined ) { \r\n  //debugger;\r\n  return calculateListPrice(lines,quote);\r\n}\r\n  return Promise.resolve();\r\n}\r\n\r\nfunction calculateListPrice(lines, quote) {\r\nif(lines != undefined && lines != null){  \r\nvar indexMap = new Map(); // Declare the Map\r\nvar productpriceMap = new Map();\r\nlet indexes = calculateGroupIndexes(lines);\r\nconst firstIndex = indexes.lowestIndex;\r\nconst lastIndex= indexes.highestIndex;\r\n\r\n// Group lines by [\"SBQQ__Group__r\"][\"SBQQ__Number__c\"]\r\nlines.forEach(line => {\r\n  if(line.record.SBQQ__Group__r != undefined && line.record.SBQQ__Group__r != null && \r\n    line.record.SBQQ__Group__r.SBQQ__Number__c != undefined && line.record.SBQQ__Group__r.SBQQ__Number__c != null)\r\n  {\r\n      const groupKey = line.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];\r\n  \r\n    if (indexMap.has(groupKey)) {\r\n      indexMap.get(groupKey).push(line);\r\n    } else {\r\n      indexMap.set(groupKey, [line]);\r\n    }\r\n}\r\n});\r\n\r\nconsole.log('Before', indexMap); \r\n\r\n// Iterate through each index up to the highest index\r\nfor (let i = (firstIndex + 1); i <= lastIndex; i++) {\r\n  if (indexMap.get(i) && indexMap.get(i - 1)) {  // Ensure both current and previous index exist\r\n    indexMap.get(i).forEach(line => {\r\n      \r\n      if ((line.record[\"SBQQ__PriorQuantity__c\"] == undefined || line.record[\"SBQQ__PriorQuantity__c\"] == null) && (line.record[\"NF_Override_Price__c\"] != true)){\r\n      \r\n      var productkey;\r\n\r\n      indexMap.get(i - 1).forEach(prevLine => {\r\n        if (line.record[\"SBQQ__ProductCode__c\"] == prevLine.record[\"SBQQ__ProductCode__c\"] && line.record[\"NF_Group_Segment_Key__c\"] == prevLine.record[\"NF_Group_Segment_Key__c\"] ) {\r\n          \r\n\r\n          // Update ListPrice from the previous line's NetTotal \r\n          if(productpriceMap.has(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"])){\r\n            line.record[\"SBQQ__ListPrice__c\"] = productpriceMap.get(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"]);\r\n          }\r\n          else{\r\n            line.record[\"SBQQ__ListPrice__c\"] = prevLine.record[\"SBQQ__SpecialPrice__c\"];  //Updated Special Price from NetTotal\r\n          }\r\n          \r\n          // Calculate SpecialTotal\r\n          let specialTotal = line.record[\"SBQQ__ListPrice__c\"] + \r\n                             (line.record[\"SBQQ__ListPrice__c\"] * (line.record[\"NF_Quote_Escalation__c\"] / 100));\r\n          \r\n          // Update SpecialPrice\r\n          line.record[\"SBQQ__SpecialPriceType__c\"] = 'Custom';\r\n          line.record[\"SBQQ__SpecialPrice__c\"] = specialTotal;\r\n\r\n\r\n          productkey=line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"];\r\n          productpriceMap.set(productkey,specialTotal);\r\n          return;\r\n        }\r\n      });\r\n      \r\n      if(!productpriceMap.has(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"])){\r\n          line.record[\"NF_Quote_Escalation__c\"]= null;\r\n          line.record[\"SBQQ__SpecialPriceType__c\"] = 'Custom';\r\n          line.record[\"SBQQ__SpecialPrice__c\"] = line.record[\"SBQQ__ListPrice__c\"];\r\n      }\r\n  }else if(line.record[\"NF_Override_Price__c\"]){\r\n          line.record[\"SBQQ__SpecialPriceType__c\"] = 'Custom';\r\n          line.record[\"SBQQ__SpecialPrice__c\"] = line.record[\"SBQQ__ListPrice__c\"];\r\n          productkey=line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"];\r\n          productpriceMap.set(productkey,line.record[\"SBQQ__ListPrice__c\"]);\r\n    }\r\n});\r\n  }\r\n}\r\n}\r\nconsole.log('After', indexMap);   \r\nreturn Promise.resolve();\r\n\r\n}\r\n\r\n\r\n\r\nfunction calculateGroupIndexes(lines) {\r\n  if(lines != undefined && lines != null){ \r\n  // Filter out lines that have a valid Group Number\r\n  let groupLines = lines.filter(line => \r\n    line.record.SBQQ__Group__c != undefined && line.record.SBQQ__Group__c != null &&\r\n    line.record.SBQQ__Group__r != undefined && line.record.SBQQ__Group__r != null && \r\n    line.record.SBQQ__Group__r.SBQQ__Number__c != undefined && line.record.SBQQ__Group__r.SBQQ__Number__c != null\r\n  );\r\n  if(groupLines.length > 0){\r\n   // Sort lines based on SBQQ__Group__r[\"SBQQ__Number__c\"]\r\n    groupLines.sort((a, b) => \r\n    a.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"] - b.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"]);\r\n\r\n  // Lowest index is the first element after sorting, highest is the last\r\n  let lowestIndex = groupLines[0].record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];\r\n  let highestIndex = groupLines[groupLines.length - 1].record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];\r\n\r\n  return { lowestIndex, highestIndex };\r\n  }\r\n  \r\n  return { lowestIndex: 0 , highestIndex: 0 };\r\n  \r\n}\r\n}",
            "SBQQ__TranspiledCode__c": "\"use strict\";System.register(\"QCPlugin____UIDFiller____\",[],function(_export,_context){\"use strict\";function onAfterPriceRules(quote,lines,conn){//debugger;\nif(lines!=null&&lines!=undefined){//debugger;\nreturn calculateListPrice(lines,quote);}return Promise.resolve();}_export(\"onAfterPriceRules\",onAfterPriceRules);function calculateListPrice(lines,quote){if(lines!=undefined&&lines!=null){var indexMap=new Map();// Declare the Map\nvar productpriceMap=new Map();var indexes=calculateGroupIndexes(lines);var firstIndex=indexes.lowestIndex;var lastIndex=indexes.highestIndex;// Group lines by [\"SBQQ__Group__r\"][\"SBQQ__Number__c\"]\nlines.forEach(function(line){if(line.record.SBQQ__Group__r!=undefined&&line.record.SBQQ__Group__r!=null&&line.record.SBQQ__Group__r.SBQQ__Number__c!=undefined&&line.record.SBQQ__Group__r.SBQQ__Number__c!=null){var groupKey=line.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];if(indexMap.has(groupKey)){indexMap.get(groupKey).push(line);}else{indexMap.set(groupKey,[line]);}}});console.log('Before',indexMap);// Iterate through each index up to the highest index\nvar _loop=function _loop(i){if(indexMap.get(i)&&indexMap.get(i-1)){// Ensure both current and previous index exist\nindexMap.get(i).forEach(function(line){if((line.record[\"SBQQ__PriorQuantity__c\"]==undefined||line.record[\"SBQQ__PriorQuantity__c\"]==null)&&line.record[\"NF_Override_Price__c\"]!=true){var productkey;indexMap.get(i-1).forEach(function(prevLine){if(line.record[\"SBQQ__ProductCode__c\"]==prevLine.record[\"SBQQ__ProductCode__c\"]&&line.record[\"NF_Group_Segment_Key__c\"]==prevLine.record[\"NF_Group_Segment_Key__c\"]){// Update ListPrice from the previous line's NetTotal \nif(productpriceMap.has(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"])){line.record[\"SBQQ__ListPrice__c\"]=productpriceMap.get(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"]);}else{line.record[\"SBQQ__ListPrice__c\"]=prevLine.record[\"SBQQ__SpecialPrice__c\"];//Updated Special Price from NetTotal\n}// Calculate SpecialTotal\nvar specialTotal=line.record[\"SBQQ__ListPrice__c\"]+line.record[\"SBQQ__ListPrice__c\"]*(line.record[\"NF_Quote_Escalation__c\"]/100);// Update SpecialPrice\nline.record[\"SBQQ__SpecialPriceType__c\"]='Custom';line.record[\"SBQQ__SpecialPrice__c\"]=specialTotal;productkey=line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"];productpriceMap.set(productkey,specialTotal);return;}});if(!productpriceMap.has(line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"])){line.record[\"NF_Quote_Escalation__c\"]=null;line.record[\"SBQQ__SpecialPriceType__c\"]='Custom';line.record[\"SBQQ__SpecialPrice__c\"]=line.record[\"SBQQ__ListPrice__c\"];}}else if(line.record[\"NF_Override_Price__c\"]){line.record[\"SBQQ__SpecialPriceType__c\"]='Custom';line.record[\"SBQQ__SpecialPrice__c\"]=line.record[\"SBQQ__ListPrice__c\"];productkey=line.record[\"SBQQ__ProductCode__c\"]+\"-\"+line.record[\"NF_Group_Segment_Key__c\"];productpriceMap.set(productkey,line.record[\"SBQQ__ListPrice__c\"]);}});}};for(var i=firstIndex+1;i<=lastIndex;i++){_loop(i);}}console.log('After',indexMap);return Promise.resolve();}function calculateGroupIndexes(lines){if(lines!=undefined&&lines!=null){// Filter out lines that have a valid Group Number\nvar groupLines=lines.filter(function(line){return line.record.SBQQ__Group__c!=undefined&&line.record.SBQQ__Group__c!=null&&line.record.SBQQ__Group__r!=undefined&&line.record.SBQQ__Group__r!=null&&line.record.SBQQ__Group__r.SBQQ__Number__c!=undefined&&line.record.SBQQ__Group__r.SBQQ__Number__c!=null;});if(groupLines.length>0){// Sort lines based on SBQQ__Group__r[\"SBQQ__Number__c\"]\ngroupLines.sort(function(a,b){return a.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"]-b.record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];});// Lowest index is the first element after sorting, highest is the last\nvar lowestIndex=groupLines[0].record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];var highestIndex=groupLines[groupLines.length-1].record[\"SBQQ__Group__r\"][\"SBQQ__Number__c\"];return{lowestIndex:lowestIndex,highestIndex:highestIndex};}return{lowestIndex:0,highestIndex:0};}}return{setters:[],execute:function(){}};});"
        },
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef2"
            },
            "Name": "Clone Line Script",
            "SBQQ__QuoteLineFields__c": "NF_Cloned_Lines__c",
            "SBQQ__Code__c": "export function onAfterCloneLine(quote, clonedLines) {\r\n   clonedLines.clonedLines.standard.forEach(function (line){\r\n     line.record[\"NF_Cloned_Lines__c\"] = true;\r\n});\r\n   return Promise.resolve();\r\n}",
            "SBQQ__TranspiledCode__c": "\"use strict\";System.register(\"QCPlugin____UIDFiller____\",[],function(_export,_context){\"use strict\";function onAfterCloneLine(quote,clonedLines){clonedLines.clonedLines.standard.forEach(function(line){line.record[\"NF_Cloned_Lines__c\"]=true;});return Promise.resolve();}_export(\"onAfterCloneLine\",onAfterCloneLine);return{setters:[],execute:function(){}};});"
        }
    ]
}